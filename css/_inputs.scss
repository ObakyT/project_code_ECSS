// This file is relative to the input files that 
input{
    &[type=file]{
        opacity: 1;
        width: .0001px;
        height: .0001px;
    }
}
    
.input-file{
    display: inline-block;
    border-radius: .4vw;
    border: #32313388 solid .5px;
    padding-top: 1vh;
    padding-bottom: 1vh;
    padding-right: 3vw;
    padding-left: .5vw;
    max-width: 300px;
    cursor: pointer;
    position: relative;
    &:hover{
        box-shadow: #323133aa 0 0 1px inset;
    }
    .material-icons{
        position: absolute;
        top: 50%;
        right: .5vw;
        transform: translateY(-50%);
        border-left: #32313388 solid .5px;
        padding-left: .3vw;
    }
    // &:after{
    //     position: absolute;
    //     left: 100%;
    //     top: 0;
    //     padding: 1vh 1vw;
    //     border: #32313388 solid .5px;
    //     border-top-right-radius: .4vw;
    //     border-bottom-right-radius: .4vw;
    //     content: 'X';
    //     &:hover{
    //         box-shadow: #323133aa 0 0 1px inset;
    //     }
    // }
    .resp{
        font-size: 70%;
        overflow: hidden;
    }

    // We can manage to put in the content of the :after an svg corresponding to upload.

    // We have to set a certain structure in order to make it easier to use.
    /*

    <label class="input-file">
        <input type="file" name="" multiple>
        <span>Choose File</span>
        <br>
        <div class="resp"></div>
    </label>

    */  
    
    // We set a JS for this element by specifying its value:
    /*
    
    // Input File response
    $('input[type=file]').change( () => {
        let path = $('input[type=file]').prop('value')
        let filename = path.replace(/^.*\\/, "")
        $('input[type=file]').siblings('.resp').html(filename)
    });

    */
}